/**
 *
 * Copyright 2013-2015 Martin Goellnitz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
import groovy.util.Node;

plugins {
  id 'com.jfrog.artifactory' version '3.0.3'
  id 'com.github.kt3k.coveralls' version '2.0.1'
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'pmd'

defaultTasks 'clean', 'build'

println "Gradle: ${gradle.gradleVersion}"

version = '0.5-SNAPSHOT'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  mavenCentral()
}

dependencies {
  compile "org.slf4j:slf4j-api:1.7.12"
  compile "org.apache.commons:commons-lang3:3.4"
  compile "javax.inject:javax.inject:1"

  compile "javax.servlet:javax.servlet-api:3.1.0"

  testCompile "org.testng:testng:6.9.4"
  // integrate tck into unit tests
  testCompile "javax.inject:javax.inject-tck:1"
  // tests are logging at debug level through special log4j.properties
  testCompile "org.slf4j:slf4j-log4j12:1.7.12"
  // Some servlet API elements
  testCompile "org.mockito:mockito-all:1.10.19"
}

pmd {
  ruleSets = []
  ruleSetFiles = files('pmd.xml')
}

test {
  useTestNG() {
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
  }
}

// Triggers some unit test elements
tasks.withType(Test) {
  systemProperty 'firstUrl', 'http://user:password@github.com:80/'
  systemProperty 'secondUrl', 'http://:password@github.com'
  systemProperty 'thirdUrl', 'x://:800'
  systemProperty 'firstNonUrl', '://:80'
  systemProperty 'secondNonUrl', 'x://:'
}

// maven artifact publication stuff
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from "${buildDir}/docs/javadoc"
}

artifacts {
  archives javadocJar, sourcesJar
}

artifactory {
  contextUrl = 'https://oss.jfrog.org/artifactory'
  publish {
    repository {
      repoKey = 'oss-snapshot-local'
      username = "$bintrayUser"
      password = "$bintrayKey"
      maven = true
    }
    defaults {
      publications ('mavenJava')
    }
  }
}

publishing {
  publications {
    mavenCustom(MavenPublication) {
      from components.java
      groupId 'dinistiq'
    }
    mavenJava(MavenPublication) {
      pom.withXml {
        def pom = asNode()
        def first = pom.children().get(0)
        first.plus {
          new Node(pom, 'name', 'dinistiq')
          new Node(pom, 'description', 'JSR 330 based Java minimal footprint Dependency Injection framework')
          new Node(pom, 'url', 'http://mgoellnitz.github.io/dinistiq/')
          def scm = new Node(pom, 'scm')
          scm.appendNode('connection', 'scm:git:git@github.com:mgoellnitz/dinistiq.git')
          scm.appendNode('developerConnection', 'scm:git:git@github.com:mgoellnitz/dinistiq.git')
          scm.appendNode('url', 'git@github.com:mgoellnitz/dinistiq.git')
          def license = new Node(pom, 'licenses').appendNode('license')
          license.appendNode('name', 'LGPL-3.0')
          license.appendNode('url', 'http://opensource.org/licenses/LGPL-3.0')
          license
        }
        def developer = pom.appendNode('developers').appendNode('developer')
        developer.appendNode('name', 'Martin Goellnitz')
        developer.appendNode('organization', 'Provocon')
        developer.appendNode('organizationUrl', 'http://www.provocon.de/')
      }
      groupId 'dinistiq'
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
}
