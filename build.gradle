/**
 *
 * Copyright 2013-2021 Martin Goellnitz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
import groovy.util.Node;
import org.gradle.api.tasks.compile.AbstractCompile

plugins {
  // id 'net.saliman.cobertura' version '3.0.0' - breaks audit with oldish references
  id "com.jfrog.bintray" version '1.8.5'
  id 'com.jfrog.artifactory' version '4.24.23'
  id 'com.github.kt3k.coveralls' version '2.12.0'
  id 'net.ossindex.audit' version '0.4.11'
  id 'io.franzbecker.gradle-lombok' version '5.0.0'
}
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'pmd'

defaultTasks 'clean', 'build'

println "Gradle: ${gradle.gradleVersion}"

version = '0.9-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11

if (project.hasProperty('jdk')) {
  def bootstripClasspathStr = "${jdk}/jre/lib/rt.jar"
  project.tasks.withType(AbstractCompile, { AbstractCompile ac ->
      ac.options.bootstripClasspath = files(bootstripClasspathStr)
    })
}
// The variable is needed, even if no publication is executed
def bintrayUser = project.hasProperty('BINTRAY_USER') ? "$BINTRAY_USER" : '-'
def bintrayKey = project.hasProperty('BINTRAY_KEY') ? "$BINTRAY_KEY" : '-'

repositories {
  jcenter()
}

configurations {
  optional
  implementation.extendsFrom optional
}

lombok {
  version = "1.18.22"
  sha256 = "39f3922deb679b1852af519eb227157ef2dd0a21eec3542c8ce1b45f2df39742"
}

dependencies {
  implementation 'org.slf4j:slf4j-api:1.7.32'
  implementation 'javax.inject:javax.inject:1'
  implementation 'jakarta.annotation:jakarta.annotation-api:2.1.0-B1'

  optional 'jakarta.servlet:jakarta.servlet-api:5.0.0'

  testImplementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'
  testImplementation 'org.testng:testng:7.4.0'
  // TestNG 7.3 and up introduced a vulnerability, which needs this dependency override:
  testImplementation 'junit:junit:4.13.2'
  // Some servlet API elements
  testImplementation 'org.mockito:mockito-core:4.1.0'
  // integrate tck into unit tests
  testImplementation 'javax.inject:javax.inject-tck:1'
  // tests are logging at debug level through special logback.groovy - this is why groovy is needed here
  testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.7'
  testRuntimeOnly 'org.codehaus.groovy:groovy:[3.0,3.1)'
}

pmd {
  ruleSets = []
  ruleSetFiles = files('pmd.xml')
  toolVersion = '6.40.0'
}

test {
  useTestNG() {
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
  }
}

jacoco {
  toolVersion = '0.8.7'
}

// Triggers some unit test elements
tasks.withType(Test) {
  systemProperty 'firstUrl', 'http://user:password@github.com:80/'
  systemProperty 'secondUrl', 'http://:password@github.com'
  systemProperty 'thirdUrl', 'x://:800'
  systemProperty 'firstNonUrl', '://:80'
  systemProperty 'secondNonUrl', 'x://:'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

// maven artifact publication stuff
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from "${buildDir}/docs/javadoc"
}

artifacts {
  archives javadocJar, sourcesJar
}

artifactory {
  contextUrl = 'https://oss.jfrog.org/artifactory'
  publish {
    repository {
      repoKey = version.endsWith('SNAPSHOT') ? 'oss-snapshot-local' : 'oss-release-local'
      username = "$bintrayUser"
      password = "$bintrayKey"
    }
    defaults {
      publications ('mavenJava')
    }
  }
}

bintray {
  user = "$bintrayUser"
  key  = "$bintrayKey"
  publications = ['mavenJava'] 
  pkg {
    repo = 'maven'
    name = 'dinistiq'
    userOrg = 'mgoellnitz'
    licenses = ['LGPL-3.0']
    vcsUrl = 'https://github.com/mgoellnitz/dinistiq.git'
    version {
      name = '0.9'
      desc = 'Compatibility Release'
      released  = new Date()
    }
  }
}

publishing {
  publications {
    mavenCustom(MavenPublication) {
      from components.java
      groupId 'dinistiq'
    }
    mavenJava(MavenPublication) {
      pom.withXml {
        def rootNode = asNode()
        rootNode.children().get(3).plus {
          new Node(rootNode, 'name', 'dinistiq')
          new Node(rootNode, 'description', 'JSR 330 based Java minimal footprint Dependency Injection framework')
          new Node(rootNode, 'url', 'http://mgoellnitz.github.io/dinistiq/')
          def license = new Node(rootNode, 'licenses').appendNode('license')
          license.appendNode('name', 'LGPL-3.0')
          license.appendNode('url', 'http://opensource.org/licenses/LGPL-3.0')
          license
          def issues = new Node(rootNode, 'issueManagement')
          issues.appendNode('system', 'github')
          issues.appendNode('url', 'https://github.com/mgoellnitz/dinistiq/issues')
          issues
          def scm = new Node(rootNode, 'scm')
          scm.appendNode('connection', 'scm:git:git@github.com:mgoellnitz/dinistiq.git')
          scm.appendNode('developerConnection', 'scm:git:git@github.com:mgoellnitz/dinistiq.git')
          scm.appendNode('url', 'https://github.com/mgoellnitz/dinistiq.git')
          def developer = rootNode.appendNode('developers').appendNode('developer')
          developer.appendNode('name', 'Martin Goellnitz')
          developer.appendNode('organization', 'Provocon')
          developer.appendNode('organizationUrl', 'http://www.provocon.de/')
          developer
        }
        rootNode.dependencies.dependency.findAll { xmlDep ->
          // mark optional dependencies
          if ( project.configurations.optional.allDependencies.findAll { dep ->
              xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
            } ) {
            def xmlOptional = xmlDep.optional[ 0 ];
            if ( !xmlOptional ) {
              xmlOptional = xmlDep.appendNode( 'optional' )
            }
            xmlOptional.value = 'true';
          }

          // fix maven-publish issue when all maven dependencies are placed into runtime scope
          if ( project.configurations.implementation.allDependencies.findAll { dep ->
              xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
            } ) {
            def xmlScope = xmlDep.scope[ 0 ];
            if ( !xmlScope ) {
              xmlScope = xmlDep.appendNode( 'scope' )
            }
            xmlScope.value = 'compile';
          }
        }
      }
      groupId 'dinistiq'
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
}
